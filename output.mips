.data:
err_string: .asciiz "\ndivide by zero error!\n"
nextline_string: .asciiz "\n"
.text:
li $s0, 500
sw $s0, 100($gp)
li $s0, 0
sw $s0, 96($gp)
li $s0 , 2
addi $sp,$sp,-4
sw $s0,0($sp)
lw $s0, 0($sp)
addi $sp,$sp,4
lw $s1, 96($gp)
li $s2, 104
add $s3, $s1, $s2
add $s3, $s3, $gp
sw $s0, 0($s3)
li $s0,500
sw $s0, 96($gp)
jal main
li $v0, 17
lw $a0, 0($sp)
addi $sp, $sp,4
syscall
main: addi $sp, $sp,-4
sw $ra,0($sp)
li $s0 , 1
addi $sp,$sp,-4
sw $s0,0($sp)
lw $s0, 0($sp)
addi $sp,$sp,4
lw $s1, 96($gp)
li $s2, 108
add $s3, $s1, $s2
add $s3, $s3, $gp
sw $s0, 0($s3)
a38: lw $s1,96($gp)
addi $s2,$s1,108
add $s2,$s2,$gp
lw $s0,0($s2)
addi $sp, $sp,-4
sw $s0,0($sp)
li $s0 , 5
addi $sp,$sp,-4
sw $s0,0($sp)
lw $s0, 0($sp)
addi $sp, $sp,4
lw $s1, 0($sp)
addi $sp, $sp,4
blt $s0, $s1,OperatorSmallEqual_false0
li $s0, 1
j OperatorSmallEqual_write0
OperatorSmallEqual_false0: li $s0, 0
OperatorSmallEqual_write0: addi $sp, $sp,-4
sw $s0,0($sp)
lw $s0, 0($sp)
addi $sp, $sp,4
beq $s0,$zero, a94
lw $s1,96($gp)
addi $s2,$s1,108
add $s2,$s2,$gp
lw $s0,0($s2)
addi $sp, $sp,-4
sw $s0,0($sp)
li $v0,1
lw $a0,0($sp)
addi $sp,$sp,4
syscall
li $v0,4
la $a0,nextline_string
syscall
li $v0,0
addi $sp,$sp,-4
sw $v0,0($sp)
lw $v1, 0($sp)
addi $sp, $sp,4
lw $s1,96($gp)
add $s1,$s1,$gp
addi $s2,$s1, 108
lw $s0, 0($s2)
li $s1, 1
add $s2,$s0,$s1
addi $sp, $sp,-4
sw $s2,0($sp)
lw $s0, 0($sp)
addi $sp,$sp,4
lw $s1, 96($gp)
li $s2, 108
add $s3, $s1, $s2
add $s3, $s3, $gp
sw $s0, 0($s3)
j a38
a94: li $v0,0
lw $s0,96($gp)
subi $s0,$s0, 10
sw $s0,96($gp)
lw $ra, 0($sp)
addi $sp, $sp,4
addi $sp, $sp,-4
sw $v0, 0($sp)
jr $ra

